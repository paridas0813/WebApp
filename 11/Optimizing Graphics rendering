首先了解cpu 和 GPU工作原理

cpu 每帧都会去检测场景中的物体判读他们是否能被渲染。一个物体渲染的条件很苛刻，例如 必须在摄像机的视图屏截头体内。不能看到的会被剔除。

cpu 收集每一个需要渲染的物体的信息，让后把他们排列到一个叫做drawcall的命令中。 一个drawcall包含 一个单独的面片和 一个面片应该怎么渲染。 例如哪一个图片
应该被使用。在这种情况下，有相同设置的物体会被合并成相同的dwawcall.合并不同的物体到同一个drawcall叫做 batch（批处理）；

cpu 为每一个drawcall创建一个叫做 batch的数据包。batchs有可能比draw call 包含更多的数据，但是这种情况往往很可能会带来性能的问题。但是我们现在不考虑。

对于每一个batch包含一个drawcall，cpu会做如下处理

cpu会发送一个命令给GPU来改变一些叫做render state的变量集。这个命令就是大家熟知的setpass call. setpass call 告诉GPU 下一个要渲染的面片应该怎么
设置。 setpass call 仅仅在渲染下一个面片时候需要改变当前的面片渲染状态才会发送。 

cpu发送draw call 命令给GPU。这个 draw call知道GPU用当前定义的的setpass call的设置来渲染面片。

在这种情况下 ，batch会需要调用很多的pass。 一个 pass 就是shader代码的一部分，一个新的pass需要一个渲染状态的改变。 对于batch中的每一个pass，cpu都必须
发送一个新的 setpass call，必须再次发送给 draw call。
以此同时 GPU做如下工作：
 GPU控制cpu发送的任务的顺序
 如果当前的任务是setpass call GPU更新渲染状态
 如果当前任务是drawcall的话，GPU控制渲染面片。这会发生不同的阶段被shader代码的不同部分控制。 其实也就是 shader的顶点阶段和像素处理阶段
 这些会重复到GPU把cpu发送过来的所有的任务都处理完为止。

 渲染中的问题
 最重要的事情是了解 cpu和GPU都会参与到渲染的工作中。其中一个处理任务的时间太长都会导致渲染的延时。会出现CPU bound 或者 GPU bound。可以用 profiler和
 fram debug来分析问题。
 
 如果是cpu bound
 决定渲染什么
 装备命名给 gpu 
 发送命令给gpu
 
这些广泛的特性包含了很多不同的任务，这些任务会通过多线程执行。线程可以同时处理不同的任务。当一个线程在处理任务时候，其他的线程可以完成已经完成的其他的任务。
这就意味着这些工作能够很快的完成。渲染工作分为几部分来完成也就是多线程渲染。
共有3中不同类型的线程参与到多线程渲染中。主线程，工作线程和渲染线程。主线程主要处理cpu的任务。包含一些渲染的任务。渲染线程主要发送渲染命令GPU。每一个工作
线程分别负责一个单独的工作，例如 剔除和mesh skinning。每一个线程负责什么任务取决我们的游戏设置和游戏运行的硬件。例如 cpu的核越多，工作线程也越多。
因此，在不同的游戏运行平台进行性能测试，结果会不同。
由于多线程渲染依赖于硬件，在性能测试前我们必须了解什么任务导致了我们cpu bound，如果我们的游戏是由于在线程中剔除运行的时间太长导致运行速度变慢，那么我们
减少在另一个线程中的发送的命令是没有帮助的。
注意：不是所有的平台都支持多线程。在写这个的时候 WebGL是不支持的。在不支持多线程的平台上所有的gpu任务都是在一个线程中运行的。

Graphics jobs
Graphics jobs 可以在play setting中设置来决定是否让工作线程来执行在主线程中执行的渲染任务，在一些情况下。这在一些平台上可能给性能一个大的提升。如果
你想使用这种特征，我们应该在profile游戏时候不激活graphic job来观察性能。

找出影响性能的任务后，来分析一些一个可能的原因和解决方法
发送gpu 的命令

发送gpu的命令时间往往是最主要的原因，这个主要表现在多种不同平台上的渲染线程中。
给gpu最耗费的命令是 setpass call。如果造成 cpu bounds的原因是 给gpu发送命令的话，减少 setpass call 有可能会提高性能。 我们可以在 profiler中看到多少setpass
call 和batchs。setpass call 发送的数量取决于目标平台的硬件。
setpass call 的数量和 batches的数量关系取决于几个因素。通常往往是一下几个

减少batchs的数量或者使更多物体使用相同的渲染状态，在大多数情况下会减少setpass call 数量。
减少setpass call 数量，会提高cpu性能。
如果减少batchs并没有减少setpass call ，还会带来性能的提升。这是因为cpu在对相同数量的mesh data处理上能够更有效的处理的一个batch而不多个。
因此广泛的说，有三种方式来减少batch和 setpass calls。

1减少渲染的数量将会同事减少batchs 和 setpass calls.
2减少每个物体必须渲染的次数将会减少 setpass calls 数量
3合并物体渲染所必须的数据到少量的batchs中会减少batchs数量。
1 减少渲染的物体数量
减少摄像机裁剪的距离   Layer Cull Distances（设置不同的layer的裁剪距离）  occulusion culling 不渲染被其他挡住的物体，但是会导致cpu过载，设置
也很复杂。

2.实时光照，阴影，和反射在为游戏带来真实的同时也很费性能。使用这些特性会导致物体渲染多次，而给性能带来很大影响。这些影响主要由于rendering path 引起的。
最大的不同就是在处理实时光照，阴影和反射。deferred rendering 在使用很多实时光照阴影和反射的硬件性能比较高的平台使用好。foward rendering 反之。
出了渲染路径的选择外，实时光照阴影和反射也能影响我们有些的性能，了解怎么优化他们很重要

Dynamic lighting in Unity is a very complex subject and discussing it in depth is beyond the scope of this article, but this tutorial is
an excellent introduction to the subject and this page of the Unity Manual has details on common lighting optimizations.
Dynamic lighting is expensive. When our scene contains objects that don’t move, such as scenery, we can use a technique called
baking to precompute the lighting for the scene so that runtime lighting calculations are not required. This tutorial gives 
an introduction to the technique, and this section of the Unity Manual covers baked lighting in detail.
If we wish to use realtime shadows in our game, this is likely an area where we can improve performance. This page of the 
Unity Manual is a good guide to the shadow properties that can be tweaked in Quality Settings and how these will affect 
appearance and performance. For example, we can use the Shadow Distance property to ensure that only nearby objects cast 
shadows.
Reflection probes create realistic reflections but can be very costly in terms of batches. It’s best to keep our use of 
reflections to a minimum where performance is a concern, and to optimize them as much as possible where they are used. 
This page of the Unity Manual is a useful guide to optimizing reflection probes.

3.合并物体到几个batchs
batch条件 
共享材质
材质有相同的设置
静态batching 
dynamica batching
batching UI
GPU instancing 
texture Atlasing

It is possible to manually combine meshes that share the same material and texture, either in the Unity Editor or via code 
at runtime. When combining meshes in this way, we must be aware that shadows, lighting and culling will still operate on a
per-object level; this means that a performance increase from combining meshes could be counteracted by no longer being
able to cull those objects when they would otherwise not have been rendered. If we wish to investigate this approach,
we should examine the the Mesh.CombineMeshes function. The CombineChildren script in Unity’s Standard Assets package 
is an example of this technique.
使用 renderer.shaderedMaterial 替代Renderer.material

culling sorting and batching
culling 会正在绘制的物体的数据，把他们排列到batches中然后产生gpu命令会带来cpu bounds 。依据与不同的游戏设置和硬件这些任务会在主线程或者单独的线程中
culling 自身是很费的，但是减少不必要的culling 可能会对性能有帮助。There is a per-object-per-camera overhead for all active scene 
objects, even those which are on layers that are not being rendered. To reduce this, we should disable cameras and
deactivate or disable renderers that are not currently in use.

batching 在提升发送给gpu命令的同时可能会带来意想不到的overhead。如果是这样请减少batching。

Skinned meshes
对于没有动作的物体使用meshrender替代skinnedmeshrender
对于使用动作少的物体用skinnedmeshRenderer的bakemesh来创建相匹配的mesh。
减少使用的物体顶点数目。

减少与渲染无关的操作 例如可以不执行一些脚本

如果是GPU bounds 填充率 内存带宽 顶点处理

如果是填充率引起的
优化fragment shader 

overdaw
减少使用透明渲染序列
image effects 
使用优化过的image effects

memory band width 
 指的是 gpu能够读写到对应的内存的速度。主要由于图片太大。
 使用图片压缩，使用minimap
 
 顶点处理
 减少顶点 使用normalmap但是也会带来性能降低 
 如果不使用noramlmap 不用顶点切线
 使用lod技术 
 优化shader等。
 

















 
 
 
 


