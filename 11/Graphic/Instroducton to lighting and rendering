现在游戏里面广泛使用全局光

全局光一种属于可以与用模拟与游戏世界中可以交互的复杂的光照的一种技术和数学模型的范畴。精确的模拟全局光计算很昂贵。正式这个原因，游戏中使用一系列方法在游戏运行
前来计算而不是在游戏中。

选择一种光照技术

广泛的来讲unity里面共有两种光照类型 实时光照和”提前计算好的光照“。

实时光照
实时光照可以对移动到物体有帮助但是自身没有帮助（自身不能反射给自己）。 为了创建更加真是的光照效果使用全局光，但是需要把unity precomputed 选项激活。

烘培的全局光照
当烘焙一个lightmap的时候 ，场景中静态物体的光照效果会被计算，这些结果会写到 一个场景的几何体上的覆盖的纹理上来创建光照效果。这些lightmap 会包含方向光和其他物体反射的光照
。这个光照贴图也可以用来表示带有有shader的材质的的自发光和法线相关的信息。光照烘焙过后，这些光照贴图不能在游戏中再发生变化了。实时光照能够被覆盖，但是不能
与光照贴图交互来改变光照贴图。

提前计算全局光照
通常，静态的光照贴图不受对场景中的光照影响。但是提前进行实时的全局光照可以提供我们一种可以与场景负责的光照交互的技术。

其实对光照进行预先处理就是与传统的在烘焙的时候用光线跟中方法来计算光照保存成图片的方法，它会 用光线跟踪生成一些与场景模型相同的“簇”，来表示他们的关系，这样我们就不用生成一些像素纹理来模拟光照，有了这些场景物体之间的关系后，不管我们
在场景中怎么对光照进行处理，都能够正确的展示实时的光照效果。这中产生的结果是我们的光照模型可以被转换成光照贴图来让gpu渲染，与其他的光照混合等最终输出到屏幕中。

好处和坏处
使用烘培的全局光还是提前的实时全局光，都会有利有弊。需要知道的是他们产生的光照贴图不仅需要保存显存中还要在shader中进行处理。
如果手机的显存和处理性能不是太好的话用烘焙的全局光比较好。
