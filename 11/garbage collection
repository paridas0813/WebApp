unity 的内存分为栈内存和堆内存。栈主要由操作系统管理，当值类型超出作用域后存储的单位自动释放，栈的执行效率高（原因我猜我是 因为值类型 int float 等占用的字节空间是固定的，分配的是后不用计算，而引用类型需要计算的吧），但是存储容量有限。栈内存超出作用域会立即释放回收。堆内存不会被立即释放回收，需要在特殊条件下才执行回收。当内存不足时候执行堆垃圾回收，因此
它的执行与我们需要的内存相关，由于垃圾回收会遍历堆上的所有的物体，找到没有被引用的才标记为删除，由于这个过程比较消耗时间因此会对性能造成一定的影响。
 垃圾回收产生的问题 1 回收消耗0的时间长 2 回收的时间有可能不合适 3 产出内存碎片
 解决方法 1.缓存 2.少产生对象 3oject pool
 
 通常引起不必要的垃圾回收的情况 
 string 
 Unity function calls   GameObject.CompareTag isn’t unique; many Unity function calls have alternative versions that cause no heap allocations. For example, we could use Input.GetTouch() and Input.touchCount in place of Input.touches, or Physics.SphereCastNonAlloc() in place of Physics.SphereCastAll().
 Boxing 
 Coroutines
 foreach loops
 Function references  Anonymous methods and method references should be minimized in performance-sensitive code, and especially in code that executes on a per-frame basis.
LINQ and Regular Expressions

Structuring our code to minimize the impact of garbage collection

Manually forcing garbage collection

补充： 托管堆的内存分配很特殊
最重要的是 GC堆 和 （load heap）加载堆 ，gc用于存储对象 受gc控制生命周期为创建到appdomai卸载，loadHeap 不受 不同的堆上又存不同的信息。最重要的信息就是元数据的相关的信息，也就是type对象，每个
type在 load heap上体现为一个mathod table而method table 中记录了元数据的信息，例如基态类，静态字段，实现的接口，所有方法等。（具体参见 你必须知道的.net）
 
关于静态类和静态字段 
静态字段保存在方法表中，生命周期到appdomain卸载，一个类型无论创建多少对象静态字段在内存中只有一份，静态字段只能有静态构造函数完成初始化，静态构造函数确保在类型
任何对象创建前或者静态字段方法被执行前执行。
