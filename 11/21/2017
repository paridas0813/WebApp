 脚本优化
unity编译脚本使用il2app 优与mono 1性能更高，2 C#的一些特性mono并不一定支持.但是il2cpp支持。
使用mono虚拟机的时候，unity利用IL编译器编译成il语言编译脚本到mono虚拟机中 然后在编译成机器语言。
在使用il2cpp使用，unity利用il编译器编译成il语言，然后由il2cpp编译器编译成c++然后再编译成机器代码，在编译成c++时候会有优化处理，因此性能更好


unity 中脚本的优化 
程序运行时候，中央处理器cpu会在本一帧执行数百万的指令。当其中的一条指令执行的时间过长时候就会导致游戏变卡。很多原因会导致cpu过载。例如 渲染的代码，
复杂的物理模拟，或者太多的动作的回调。其中主要探讨我们自己写的代码怎么优化。

脚本的处理过程
我们的游戏build的时候，unity打包我们当前的平台能够执行的所有的程序。（也就是说不同的平台打包出的内容不同）。cpus能够只能运行很简单的机器语言。
塔不能执行像我们的c#这样的高级语言。 这也就是意味着unity必须把我们自己的语言转换成其他的语言。这个转换过程叫编译。
unity首先把我们写的脚本编译成中间语言- CIL. CIL 是一种可以广泛的编译成不同的机器语言的语言。 CIL然后编译成我们设备自已可以识别的语言。 第二步是进行
我们所知的提前编译。或者在目标设备上进行即时编译。我们的游戏进行提钱或者即时编译取决我们自己的目标硬件。

unity 引擎的语言与我们自己的语言在运行时候交流

了解我们写的c#语言与写引擎用的c++语言有一些轻微的不同很重要。我们写的代码语言是托管的代码。当托管代码被编译成机器语言时候。他们就会被托管运行时结合。这个t
托管运行时会对内存进行控制管理确保我们的语言不会导致设备崩掉。

 造成性能差的代码
 第一 代码数据结构差，重复的调用可以一次执行的方法。
 第二是没有合理的时候用unity自带的api方法。
 第三 不该调用的时候调用，例如 当敌人已经离开玩家视线的时候一些脚本还在执行。
 最后一个原因是在我们对于自己的的代码简单苛刻，只是追求代码的简洁。
 
 写高效的代码
 1尽量移除for循环中的代码 2考虑代码是否每帧都执行 3使用缓存 4使用合理的数据结构 5 减少垃圾的回收（当我们的内存不足的时候，unity就会进行垃圾回收，这会
 耗费大量的时间因为他会遍历堆上的数据看看那些不被使用的就会把它标记上，并且不会立即回收，会等待一段时间才进行回收。）5.使用物体缓冲池
 
 避免大量的调用unity的api 一种原因是因为托管的语言与引擎的语言交流导致
 sendmessage 
 find
 transform(原因是设置物体的位置旋转等会调用onTransformChanged 事件从而会改变他的孩纸的位置) 。
 transform.positon(用transform.localPostion 替代)。
 update
 Vector2 and Vector3的数学公式的计算
 camer.main 会调用find
 
 运行时候执行需要的代码
 
 culling lod 等
 
 refer from https://unity3d.com/cn/learn/tutorials/temas/performance-optimization/diagnosing-performance-problems-using-profiler-window?playlist=44069
 
 
 
 

 
